Mini Customer Management System (CMS/CRM)
A single-file web-based demo of a Customer Management System (CMS/CRM) using HTML, CSS, and vanilla JavaScript.
Perfect for learning, prototyping, or portfolio showcasing!

ðŸ‘€ Live Demo
Want to see it in action?
https://your-demo-url-here.com (Replace with your actual demo link when deployed)

ðŸš€ Features
User Authentication: Mock login/logout to demonstrate authentication flow

Customer Management: Create, read, update, and delete (CRUD) customer records

Sales Pipeline: Visual summary of customers by status (Lead, Prospect, Customer, Churned)

Analytics: Interactive bar chart showing customer distribution across stages

Responsive Design: Works on desktop and mobile devices

Self-Contained: Everything in one HTML file (HTML, CSS, JS)â€”no backend required

ðŸ›  Technologies Used
HTML5: Structure and layout

CSS3: Styling and responsive design

JavaScript: All logic, DOM manipulation, and local storage

Chart.js: For the analytics chart (loaded via CDN)

LocalStorage: Persistent browser-based data storage

ðŸ“¦ How to Run
Download the index.html file.

Open index.html in your web browser.

Log in with the default credentials:
Username: admin
Password: admin123

Explore! Add, edit, and delete customers, view the pipeline, and refresh the analytics.

ðŸ“– Usage Guide
1. Logging In
Enter the username and password (see above).

Click the Login button.

2. Managing Customers
New Customer: Click "Add New Customer", fill in the form, and click "Save Customer".

Edit: Click the "Edit" button on a customer row, update the details, and click "Save Customer".

Delete: Click the "Delete" button on a customer row and confirm.

3. Sales Pipeline
See a visual summary of how many customers are at each stage (Lead, Prospect, Customer, Churned).

4. Analytics
Refresh Analytics: Click the "Refresh Analytics" button to update the bar chart based on current data.

ðŸ“š Purpose & Learning Outcomes
This project is designed for educational purposes. It demonstrates:

Basic authentication flows (frontend-only)

CRUD operations with vanilla JavaScript and localStorage

Dynamic UI updates (tables, forms, charts)

Responsive CSS styling

Chart.js integration for data visualization

Note: This is not a production-ready system! It lacks server, database, and real security. Use it to learn UI/UX, DOM manipulation, and simple state management.

ðŸ”§ Customization
Change default customers: Edit the customers array in the JavaScript section.

Add more fields: Customize the customer form and table columns as needed.

Expand features: Integrate with a real backend API, add user roles, or enhance the analytics.

ðŸ’¡ Contributing
Feel free to fork, modify, or extend this project!
If you find bugs or have suggestions, please open an issue or submit a pull request.